import { useQuery } from "@tanstack/react-query";
import { useParams } from "wouter";
import { ArrowLeft, Download, Printer, Calendar, DollarSign, BarChart3, Info } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Skeleton } from "@/components/ui/skeleton";
import { useToast } from "@/hooks/use-toast";
import { useTranslation } from "@/lib/i18n";
import { Link } from "wouter";

interface CostAnalysisDetail {
  id: string;
  reportId: string;
  tankSpecificationId?: string;
  materialCost: string;
  laborCost: string;
  overheadCost: string;
  totalCost: string;
  currency: string;
  analysisDate: string;
  createdAt: string;
  updatedAt: string;
  notes?: string;
  // Tank information from join
  tankName?: string;
  tankType?: string;
  capacity?: number;
  height?: number;
  diameter?: number;
  width?: number;
  material?: string;
  pressure?: string;
  temperature?: string;
}

export default function CostAnalysisDetail() {
  const { id } = useParams();
  const { t } = useTranslation();
  const { toast } = useToast();

  const { data: analysis, isLoading, error } = useQuery<CostAnalysisDetail>({
    queryKey: ["/api/cost-analyses", id],
    enabled: !!id,
  });

  const handleDownload = async () => {
    try {
      const response = await fetch(`/api/cost-analyses/${id}/export`);
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `cost-analysis-${analysis?.reportId}.pdf`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
      
      toast({
        title: t('costAnalysis.exportSuccess'),
        description: t('costAnalysis.exportSuccessDescription'),
      });
    } catch (error) {
      toast({
        title: t('costAnalysis.exportFailed'), 
        description: t('costAnalysis.exportFailedDescription'),
        variant: "destructive",
      });
    }
  };

  const handlePrint = () => {
    window.print();
  };

  if (error) {
    return (
      <div className="container mx-auto p-6">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-destructive">Hata</h1>
          <p className="text-muted-foreground mt-2">Maliyet analizi detayları yüklenirken hata oluştu</p>
          <Link href="/cost-analysis">
            <Button variant="outline" className="mt-4">
              <ArrowLeft className="mr-2 h-4 w-4" />
              {t('action.backToList')}
            </Button>
          </Link>
        </div>
      </div>
    );
  }

  if (isLoading) {
    return (
      <div className="container mx-auto p-6">
        <div className="mb-8">
          <Skeleton className="h-8 w-64 mb-2" />
          <Skeleton className="h-4 w-96" />
        </div>
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2 space-y-6">
            <Skeleton className="h-64 w-full" />
            <Skeleton className="h-32 w-full" />
          </div>
          <div className="space-y-6">
            <Skeleton className="h-48 w-full" />
            <Skeleton className="h-32 w-full" />
          </div>
        </div>
      </div>
    );
  }

  if (!analysis) {
    return (
      <div className="container mx-auto p-6">
        <div className="text-center">
          <h1 className="text-2xl font-bold">Analiz Bulunamadı</h1>
          <p className="text-muted-foreground mt-2">Belirtilen maliyet analizi mevcut değil</p>
          <Link href="/cost-analysis">
            <Button variant="outline" className="mt-4">
              <ArrowLeft className="mr-2 h-4 w-4" />
              {t('action.backToList')}
            </Button>
          </Link>
        </div>
      </div>
    );
  }

  const materialCost = parseFloat(analysis.materialCost);
  const laborCost = parseFloat(analysis.laborCost);
  const overheadCost = parseFloat(analysis.overheadCost);
  const totalCost = parseFloat(analysis.totalCost);

  const materialPercentage = totalCost > 0 ? (materialCost / totalCost * 100).toFixed(1) : '0';
  const laborPercentage = totalCost > 0 ? (laborCost / totalCost * 100).toFixed(1) : '0';
  const overheadPercentage = totalCost > 0 ? (overheadCost / totalCost * 100).toFixed(1) : '0';

  const isAutoGenerated = analysis.notes?.includes('Auto-generated') || analysis.notes?.includes('Excel Import');

  return (
    <div className="container mx-auto p-6">
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center justify-between">
          <div>
            <div className="flex items-center space-x-4 mb-2">
              <Link href="/cost-analysis">
                <Button variant="outline" size="sm">
                  <ArrowLeft className="mr-2 h-4 w-4" />
                  {t('action.backToList')}
                </Button>
              </Link>
              {isAutoGenerated && (
                <Badge variant="secondary" data-testid="badge-auto-generated">
                  <BarChart3 className="mr-1 h-3 w-3" />
                  {t('analysisInfo.autoGenerated')}
                </Badge>
              )}
            </div>
            <h1 className="text-3xl font-bold text-foreground" data-testid="text-analysis-title">
              {t('costAnalysis.detailTitle')}
            </h1>
            <p className="mt-2 text-sm text-muted-foreground" data-testid="text-analysis-subtitle">
              {t('costAnalysis.detailSubtitle')} - {analysis.reportId}
            </p>
          </div>
          <div className="flex space-x-2">
            <Button onClick={handleDownload} data-testid="button-download">
              <Download className="mr-2 h-4 w-4" />
              {t('action.download')}
            </Button>
            <Button variant="outline" onClick={handlePrint} data-testid="button-print">
              <Printer className="mr-2 h-4 w-4" />
              {t('action.print')}
            </Button>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Main Content */}
        <div className="lg:col-span-2 space-y-6">
          {/* Cost Breakdown */}
          <Card data-testid="card-cost-breakdown">
            <CardHeader>
              <CardTitle className="flex items-center">
                <DollarSign className="mr-2 h-5 w-5" />
                {t('costBreakdown.title')}
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Total Cost Header */}
              <div className="text-center p-4 bg-primary/5 rounded-lg border">
                <p className="text-sm text-muted-foreground" data-testid="text-total-cost-label">
                  {t('costBreakdown.totalCost')}
                </p>
                <p className="text-3xl font-bold text-primary" data-testid="text-total-cost-amount">
                  {totalCost.toLocaleString('tr-TR', { 
                    minimumFractionDigits: 2, 
                    maximumFractionDigits: 2 
                  })} {analysis.currency}
                </p>
              </div>

              {/* Cost Breakdown Items */}
              <div className="space-y-4">
                <div className="flex items-center justify-between p-3 bg-blue-50 dark:bg-blue-950/20 rounded-lg" data-testid="row-material-cost">
                  <div className="flex items-center space-x-3">
                    <div className="w-4 h-4 bg-blue-500 rounded"></div>
                    <span className="font-medium">{t('costBreakdown.materialCost')}</span>
                  </div>
                  <div className="text-right">
                    <p className="font-bold">{materialCost.toLocaleString('tr-TR', { 
                      minimumFractionDigits: 2, 
                      maximumFractionDigits: 2 
                    })} {analysis.currency}</p>
                    <p className="text-sm text-muted-foreground">%{materialPercentage}</p>
                  </div>
                </div>

                <div className="flex items-center justify-between p-3 bg-green-50 dark:bg-green-950/20 rounded-lg" data-testid="row-labor-cost">
                  <div className="flex items-center space-x-3">
                    <div className="w-4 h-4 bg-green-500 rounded"></div>
                    <span className="font-medium">{t('costBreakdown.laborCost')}</span>
                  </div>
                  <div className="text-right">
                    <p className="font-bold">{laborCost.toLocaleString('tr-TR', { 
                      minimumFractionDigits: 2, 
                      maximumFractionDigits: 2 
                    })} {analysis.currency}</p>
                    <p className="text-sm text-muted-foreground">%{laborPercentage}</p>
                  </div>
                </div>

                <div className="flex items-center justify-between p-3 bg-orange-50 dark:bg-orange-950/20 rounded-lg" data-testid="row-overhead-cost">
                  <div className="flex items-center space-x-3">
                    <div className="w-4 h-4 bg-orange-500 rounded"></div>
                    <span className="font-medium">{t('costBreakdown.overheadCost')}</span>
                  </div>
                  <div className="text-right">
                    <p className="font-bold">{overheadCost.toLocaleString('tr-TR', { 
                      minimumFractionDigits: 2, 
                      maximumFractionDigits: 2 
                    })} {analysis.currency}</p>
                    <p className="text-sm text-muted-foreground">%{overheadPercentage}</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Tank Information */}
          {analysis.tankName && (
            <Card data-testid="card-tank-info">
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Info className="mr-2 h-5 w-5" />
                  {t('tankInfo.title')}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-3">
                    <div>
                      <p className="text-sm text-muted-foreground">{t('tankInfo.name')}</p>
                      <p className="font-medium" data-testid="text-tank-name">{analysis.tankName}</p>
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">{t('tankInfo.type')}</p>
                      <p className="font-medium" data-testid="text-tank-type">{analysis.tankType}</p>
                    </div>
                    {analysis.capacity && (
                      <div>
                        <p className="text-sm text-muted-foreground">{t('tankInfo.capacity')}</p>
                        <p className="font-medium" data-testid="text-tank-capacity">{analysis.capacity.toLocaleString()} L</p>
                      </div>
                    )}
                  </div>
                  <div className="space-y-3">
                    {analysis.height && (
                      <div>
                        <p className="text-sm text-muted-foreground">{t('tankInfo.height')}</p>
                        <p className="font-medium" data-testid="text-tank-height">{analysis.height.toLocaleString()} mm</p>
                      </div>
                    )}
                    {analysis.diameter && (
                      <div>
                        <p className="text-sm text-muted-foreground">{t('tankInfo.diameter')}</p>
                        <p className="font-medium" data-testid="text-tank-diameter">{analysis.diameter.toLocaleString()} mm</p>
                      </div>
                    )}
                    {analysis.material && (
                      <div>
                        <p className="text-sm text-muted-foreground">{t('tankInfo.material')}</p>
                        <p className="font-medium" data-testid="text-tank-material">{analysis.material}</p>
                      </div>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>
          )}
        </div>

        {/* Sidebar */}
        <div className="space-y-6">
          {/* Analysis Information */}
          <Card data-testid="card-analysis-info">
            <CardHeader>
              <CardTitle className="flex items-center">
                <Calendar className="mr-2 h-5 w-5" />
                {t('analysisInfo.title')}
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <p className="text-sm text-muted-foreground">{t('analysisInfo.reportId')}</p>
                <p className="font-mono text-sm" data-testid="text-report-id">{analysis.reportId}</p>
              </div>
              <Separator />
              <div>
                <p className="text-sm text-muted-foreground">{t('analysisInfo.analysisDate')}</p>
                <p className="font-medium" data-testid="text-analysis-date">
                  {new Date(analysis.analysisDate).toLocaleDateString('tr-TR')}
                </p>
              </div>
              <div>
                <p className="text-sm text-muted-foreground">{t('analysisInfo.createdDate')}</p>
                <p className="font-medium" data-testid="text-created-date">
                  {new Date(analysis.createdAt).toLocaleDateString('tr-TR')}
                </p>
              </div>
              <div>
                <p className="text-sm text-muted-foreground">{t('analysisInfo.lastUpdated')}</p>
                <p className="font-medium" data-testid="text-updated-date">
                  {new Date(analysis.updatedAt).toLocaleDateString('tr-TR')}
                </p>
              </div>
            </CardContent>
          </Card>

          {/* Notes */}
          {analysis.notes && (
            <Card data-testid="card-notes">
              <CardHeader>
                <CardTitle>{t('analysisInfo.notes')}</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-muted-foreground whitespace-pre-wrap" data-testid="text-notes">
                  {analysis.notes}
                </p>
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </div>
  );
}